// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmap.proto

#include "osmap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedBBox2_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedDescriptor_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedEllipsoid_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SerializedFeature_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedGraph_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedK_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SerializedKeyframe_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedKeyframeFeatures_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedKeypoint_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SerializedMappoint_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedNode_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedObject_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedObjectTrack_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedPose_osmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedPosition_osmap_2eproto;
class SerializedDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedDescriptor> _instance;
} _SerializedDescriptor_default_instance_;
class SerializedPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedPose> _instance;
} _SerializedPose_default_instance_;
class SerializedPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedPosition> _instance;
} _SerializedPosition_default_instance_;
class SerializedKeypointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedKeypoint> _instance;
} _SerializedKeypoint_default_instance_;
class SerializedKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedK> _instance;
} _SerializedK_default_instance_;
class SerializedKArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedKArray> _instance;
} _SerializedKArray_default_instance_;
class SerializedEllipsoidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedEllipsoid> _instance;
} _SerializedEllipsoid_default_instance_;
class SerializedMappointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedMappoint> _instance;
} _SerializedMappoint_default_instance_;
class SerializedMappointArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedMappointArray> _instance;
} _SerializedMappointArray_default_instance_;
class SerializedObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedObject> _instance;
} _SerializedObject_default_instance_;
class SerializedObjectArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedObjectArray> _instance;
} _SerializedObjectArray_default_instance_;
class SerializedBBox2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedBBox2> _instance;
} _SerializedBBox2_default_instance_;
class SerializedNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedNode> _instance;
} _SerializedNode_default_instance_;
class SerializedGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedGraph> _instance;
} _SerializedGraph_default_instance_;
class SerializedGraphArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedGraphArray> _instance;
} _SerializedGraphArray_default_instance_;
class SerializedObjectTrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedObjectTrack> _instance;
} _SerializedObjectTrack_default_instance_;
class SerializedObjectTrackArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedObjectTrackArray> _instance;
} _SerializedObjectTrackArray_default_instance_;
class SerializedKeyframeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedKeyframe> _instance;
} _SerializedKeyframe_default_instance_;
class SerializedKeyframeArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedKeyframeArray> _instance;
} _SerializedKeyframeArray_default_instance_;
class SerializedFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedFeature> _instance;
} _SerializedFeature_default_instance_;
class SerializedKeyframeFeaturesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedKeyframeFeatures> _instance;
} _SerializedKeyframeFeatures_default_instance_;
class SerializedKeyframeFeaturesArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedKeyframeFeaturesArray> _instance;
} _SerializedKeyframeFeaturesArray_default_instance_;
static void InitDefaultsscc_info_SerializedBBox2_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedBBox2_default_instance_;
    new (ptr) ::SerializedBBox2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedBBox2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedBBox2_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerializedBBox2_osmap_2eproto}, {}};

static void InitDefaultsscc_info_SerializedDescriptor_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedDescriptor_default_instance_;
    new (ptr) ::SerializedDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedDescriptor_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerializedDescriptor_osmap_2eproto}, {}};

static void InitDefaultsscc_info_SerializedEllipsoid_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedEllipsoid_default_instance_;
    new (ptr) ::SerializedEllipsoid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedEllipsoid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedEllipsoid_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerializedEllipsoid_osmap_2eproto}, {}};

static void InitDefaultsscc_info_SerializedFeature_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedFeature_default_instance_;
    new (ptr) ::SerializedFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SerializedFeature_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SerializedFeature_osmap_2eproto}, {
      &scc_info_SerializedKeypoint_osmap_2eproto.base,
      &scc_info_SerializedDescriptor_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedGraph_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedGraph_default_instance_;
    new (ptr) ::SerializedGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedGraph_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedGraph_osmap_2eproto}, {
      &scc_info_SerializedNode_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedGraphArray_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedGraphArray_default_instance_;
    new (ptr) ::SerializedGraphArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedGraphArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedGraphArray_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedGraphArray_osmap_2eproto}, {
      &scc_info_SerializedGraph_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedK_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedK_default_instance_;
    new (ptr) ::SerializedK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedK_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerializedK_osmap_2eproto}, {}};

static void InitDefaultsscc_info_SerializedKArray_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedKArray_default_instance_;
    new (ptr) ::SerializedKArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedKArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedKArray_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedKArray_osmap_2eproto}, {
      &scc_info_SerializedK_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedKeyframe_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedKeyframe_default_instance_;
    new (ptr) ::SerializedKeyframe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedKeyframe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SerializedKeyframe_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SerializedKeyframe_osmap_2eproto}, {
      &scc_info_SerializedPose_osmap_2eproto.base,
      &scc_info_SerializedK_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedKeyframeArray_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedKeyframeArray_default_instance_;
    new (ptr) ::SerializedKeyframeArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedKeyframeArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedKeyframeArray_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedKeyframeArray_osmap_2eproto}, {
      &scc_info_SerializedKeyframe_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedKeyframeFeatures_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedKeyframeFeatures_default_instance_;
    new (ptr) ::SerializedKeyframeFeatures();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedKeyframeFeatures::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedKeyframeFeatures_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedKeyframeFeatures_osmap_2eproto}, {
      &scc_info_SerializedFeature_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedKeyframeFeaturesArray_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedKeyframeFeaturesArray_default_instance_;
    new (ptr) ::SerializedKeyframeFeaturesArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedKeyframeFeaturesArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedKeyframeFeaturesArray_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedKeyframeFeaturesArray_osmap_2eproto}, {
      &scc_info_SerializedKeyframeFeatures_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedKeypoint_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedKeypoint_default_instance_;
    new (ptr) ::SerializedKeypoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedKeypoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedKeypoint_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerializedKeypoint_osmap_2eproto}, {}};

static void InitDefaultsscc_info_SerializedMappoint_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedMappoint_default_instance_;
    new (ptr) ::SerializedMappoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedMappoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SerializedMappoint_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SerializedMappoint_osmap_2eproto}, {
      &scc_info_SerializedPosition_osmap_2eproto.base,
      &scc_info_SerializedDescriptor_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedMappointArray_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedMappointArray_default_instance_;
    new (ptr) ::SerializedMappointArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedMappointArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedMappointArray_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedMappointArray_osmap_2eproto}, {
      &scc_info_SerializedMappoint_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedNode_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedNode_default_instance_;
    new (ptr) ::SerializedNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedNode_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedNode_osmap_2eproto}, {
      &scc_info_SerializedBBox2_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedObject_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedObject_default_instance_;
    new (ptr) ::SerializedObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedObject_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedObject_osmap_2eproto}, {
      &scc_info_SerializedEllipsoid_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedObjectArray_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedObjectArray_default_instance_;
    new (ptr) ::SerializedObjectArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedObjectArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedObjectArray_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedObjectArray_osmap_2eproto}, {
      &scc_info_SerializedObject_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedObjectTrack_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedObjectTrack_default_instance_;
    new (ptr) ::SerializedObjectTrack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedObjectTrack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedObjectTrack_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedObjectTrack_osmap_2eproto}, {
      &scc_info_SerializedBBox2_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedObjectTrackArray_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedObjectTrackArray_default_instance_;
    new (ptr) ::SerializedObjectTrackArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedObjectTrackArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedObjectTrackArray_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializedObjectTrackArray_osmap_2eproto}, {
      &scc_info_SerializedObjectTrack_osmap_2eproto.base,}};

static void InitDefaultsscc_info_SerializedPose_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedPose_default_instance_;
    new (ptr) ::SerializedPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedPose_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerializedPose_osmap_2eproto}, {}};

static void InitDefaultsscc_info_SerializedPosition_osmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerializedPosition_default_instance_;
    new (ptr) ::SerializedPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerializedPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedPosition_osmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerializedPosition_osmap_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osmap_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedDescriptor, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedPose, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedPosition, x_),
  PROTOBUF_FIELD_OFFSET(::SerializedPosition, y_),
  PROTOBUF_FIELD_OFFSET(::SerializedPosition, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedKeypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedKeypoint, ptx_),
  PROTOBUF_FIELD_OFFSET(::SerializedKeypoint, pty_),
  PROTOBUF_FIELD_OFFSET(::SerializedKeypoint, angle_),
  PROTOBUF_FIELD_OFFSET(::SerializedKeypoint, octave_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedK, fx_),
  PROTOBUF_FIELD_OFFSET(::SerializedK, fy_),
  PROTOBUF_FIELD_OFFSET(::SerializedK, cx_),
  PROTOBUF_FIELD_OFFSET(::SerializedK, cy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedKArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedKArray, k_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedEllipsoid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedEllipsoid, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedMappoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedMappoint, id_),
  PROTOBUF_FIELD_OFFSET(::SerializedMappoint, position_),
  PROTOBUF_FIELD_OFFSET(::SerializedMappoint, visible_),
  PROTOBUF_FIELD_OFFSET(::SerializedMappoint, found_),
  PROTOBUF_FIELD_OFFSET(::SerializedMappoint, briefdescriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedMappointArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedMappointArray, mappoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedObject, ellipsoid_),
  PROTOBUF_FIELD_OFFSET(::SerializedObject, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedObjectArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedObjectArray, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedBBox2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedBBox2, xmin_),
  PROTOBUF_FIELD_OFFSET(::SerializedBBox2, ymin_),
  PROTOBUF_FIELD_OFFSET(::SerializedBBox2, xmax_),
  PROTOBUF_FIELD_OFFSET(::SerializedBBox2, ymax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedNode, node_id_),
  PROTOBUF_FIELD_OFFSET(::SerializedNode, category_id_),
  PROTOBUF_FIELD_OFFSET(::SerializedNode, neighbours_ids_),
  PROTOBUF_FIELD_OFFSET(::SerializedNode, object_id_),
  PROTOBUF_FIELD_OFFSET(::SerializedNode, bbox_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedGraph, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedGraphArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedGraphArray, graph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, id_),
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, cat_),
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, last_frame_id_),
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, color_r_),
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, color_g_),
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, color_b_),
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, status_),
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, kf_bboxes_),
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, kf_indices_),
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrack, kf_scores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrackArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedObjectTrackArray, objecttrack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframe, id_),
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframe, pose_),
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframe, kmatrix_),
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframe, kindex_),
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframe, loopedgesids_),
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframe, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframeArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframeArray, keyframe_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedFeature, mappoint_id_),
  PROTOBUF_FIELD_OFFSET(::SerializedFeature, keypoint_),
  PROTOBUF_FIELD_OFFSET(::SerializedFeature, briefdescriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframeFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframeFeatures, keyframe_id_),
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframeFeatures, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframeFeaturesArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerializedKeyframeFeaturesArray, feature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SerializedDescriptor)},
  { 6, -1, sizeof(::SerializedPose)},
  { 12, -1, sizeof(::SerializedPosition)},
  { 20, -1, sizeof(::SerializedKeypoint)},
  { 29, -1, sizeof(::SerializedK)},
  { 38, -1, sizeof(::SerializedKArray)},
  { 44, -1, sizeof(::SerializedEllipsoid)},
  { 50, -1, sizeof(::SerializedMappoint)},
  { 60, -1, sizeof(::SerializedMappointArray)},
  { 66, -1, sizeof(::SerializedObject)},
  { 73, -1, sizeof(::SerializedObjectArray)},
  { 79, -1, sizeof(::SerializedBBox2)},
  { 88, -1, sizeof(::SerializedNode)},
  { 98, -1, sizeof(::SerializedGraph)},
  { 104, -1, sizeof(::SerializedGraphArray)},
  { 110, -1, sizeof(::SerializedObjectTrack)},
  { 125, -1, sizeof(::SerializedObjectTrackArray)},
  { 131, -1, sizeof(::SerializedKeyframe)},
  { 142, -1, sizeof(::SerializedKeyframeArray)},
  { 148, -1, sizeof(::SerializedFeature)},
  { 156, -1, sizeof(::SerializedKeyframeFeatures)},
  { 163, -1, sizeof(::SerializedKeyframeFeaturesArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedKeypoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedKArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedEllipsoid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedMappoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedMappointArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedObjectArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedBBox2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedGraphArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedObjectTrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedObjectTrackArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedKeyframe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedKeyframeArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedKeyframeFeatures_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerializedKeyframeFeaturesArray_default_instance_),
};

const char descriptor_table_protodef_osmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013osmap.proto\"%\n\024SerializedDescriptor\022\r\n"
  "\005block\030\001 \003(\007\"!\n\016SerializedPose\022\017\n\007elemen"
  "t\030\001 \003(\002\"5\n\022SerializedPosition\022\t\n\001x\030\001 \001(\002"
  "\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"M\n\022SerializedKeyp"
  "oint\022\013\n\003ptx\030\001 \001(\002\022\013\n\003pty\030\002 \001(\002\022\r\n\005angle\030"
  "\003 \001(\002\022\016\n\006octave\030\004 \001(\002\"=\n\013SerializedK\022\n\n\002"
  "fx\030\001 \001(\002\022\n\n\002fy\030\002 \001(\002\022\n\n\002cx\030\003 \001(\002\022\n\n\002cy\030\004"
  " \001(\002\"+\n\020SerializedKArray\022\027\n\001k\030\001 \003(\0132\014.Se"
  "rializedK\"&\n\023SerializedEllipsoid\022\017\n\007elem"
  "ent\030\001 \003(\002\"\227\001\n\022SerializedMappoint\022\n\n\002id\030\001"
  " \001(\r\022%\n\010position\030\002 \001(\0132\023.SerializedPosit"
  "ion\022\017\n\007visible\030\003 \001(\002\022\r\n\005found\030\004 \001(\002\022.\n\017b"
  "riefdescriptor\030\005 \001(\0132\025.SerializedDescrip"
  "tor\"@\n\027SerializedMappointArray\022%\n\010mappoi"
  "nt\030\001 \003(\0132\023.SerializedMappoint\"N\n\020Seriali"
  "zedObject\022\'\n\tellipsoid\030\001 \001(\0132\024.Serialize"
  "dEllipsoid\022\021\n\tobject_id\030\002 \001(\r\":\n\025Seriali"
  "zedObjectArray\022!\n\006object\030\001 \003(\0132\021.Seriali"
  "zedObject\"I\n\017SerializedBBox2\022\014\n\004xmin\030\001 \001"
  "(\002\022\014\n\004ymin\030\002 \001(\002\022\014\n\004xmax\030\003 \001(\002\022\014\n\004ymax\030\004"
  " \001(\002\"\201\001\n\016SerializedNode\022\017\n\007node_id\030\001 \001(\r"
  "\022\023\n\013category_id\030\002 \001(\r\022\026\n\016neighbours_ids\030"
  "\003 \003(\r\022\021\n\tobject_id\030\004 \001(\r\022\036\n\004bbox\030\005 \001(\0132\020"
  ".SerializedBBox2\"0\n\017SerializedGraph\022\035\n\004n"
  "ode\030\001 \003(\0132\017.SerializedNode\"7\n\024Serialized"
  "GraphArray\022\037\n\005graph\030\001 \003(\0132\020.SerializedGr"
  "aph\"\326\001\n\025SerializedObjectTrack\022\n\n\002id\030\001 \001("
  "\r\022\013\n\003cat\030\002 \001(\r\022\025\n\rlast_frame_id\030\003 \001(\r\022\017\n"
  "\007color_r\030\004 \001(\r\022\017\n\007color_g\030\005 \001(\r\022\017\n\007color"
  "_b\030\006 \001(\r\022\016\n\006status\030\007 \001(\r\022#\n\tkf_bboxes\030\010 "
  "\003(\0132\020.SerializedBBox2\022\022\n\nkf_indices\030\t \003("
  "\r\022\021\n\tkf_scores\030\n \003(\001\"I\n\032SerializedObject"
  "TrackArray\022+\n\013objecttrack\030\001 \003(\0132\026.Serial"
  "izedObjectTrack\"\227\001\n\022SerializedKeyframe\022\n"
  "\n\002id\030\001 \001(\r\022\035\n\004pose\030\002 \001(\0132\017.SerializedPos"
  "e\022\035\n\007kmatrix\030\003 \001(\0132\014.SerializedK\022\016\n\006kind"
  "ex\030\004 \001(\r\022\024\n\014loopedgesids\030\005 \003(\r\022\021\n\ttimest"
  "amp\030\006 \001(\001\"@\n\027SerializedKeyframeArray\022%\n\010"
  "keyframe\030\001 \003(\0132\023.SerializedKeyframe\"\177\n\021S"
  "erializedFeature\022\023\n\013mappoint_id\030\002 \001(\r\022%\n"
  "\010keypoint\030\003 \001(\0132\023.SerializedKeypoint\022.\n\017"
  "briefdescriptor\030\004 \001(\0132\025.SerializedDescri"
  "ptor\"V\n\032SerializedKeyframeFeatures\022\023\n\013ke"
  "yframe_id\030\001 \001(\r\022#\n\007feature\030\002 \003(\0132\022.Seria"
  "lizedFeature\"O\n\037SerializedKeyframeFeatur"
  "esArray\022,\n\007feature\030\001 \003(\0132\033.SerializedKey"
  "frameFeaturesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osmap_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osmap_2eproto_sccs[22] = {
  &scc_info_SerializedBBox2_osmap_2eproto.base,
  &scc_info_SerializedDescriptor_osmap_2eproto.base,
  &scc_info_SerializedEllipsoid_osmap_2eproto.base,
  &scc_info_SerializedFeature_osmap_2eproto.base,
  &scc_info_SerializedGraph_osmap_2eproto.base,
  &scc_info_SerializedGraphArray_osmap_2eproto.base,
  &scc_info_SerializedK_osmap_2eproto.base,
  &scc_info_SerializedKArray_osmap_2eproto.base,
  &scc_info_SerializedKeyframe_osmap_2eproto.base,
  &scc_info_SerializedKeyframeArray_osmap_2eproto.base,
  &scc_info_SerializedKeyframeFeatures_osmap_2eproto.base,
  &scc_info_SerializedKeyframeFeaturesArray_osmap_2eproto.base,
  &scc_info_SerializedKeypoint_osmap_2eproto.base,
  &scc_info_SerializedMappoint_osmap_2eproto.base,
  &scc_info_SerializedMappointArray_osmap_2eproto.base,
  &scc_info_SerializedNode_osmap_2eproto.base,
  &scc_info_SerializedObject_osmap_2eproto.base,
  &scc_info_SerializedObjectArray_osmap_2eproto.base,
  &scc_info_SerializedObjectTrack_osmap_2eproto.base,
  &scc_info_SerializedObjectTrackArray_osmap_2eproto.base,
  &scc_info_SerializedPose_osmap_2eproto.base,
  &scc_info_SerializedPosition_osmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osmap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osmap_2eproto = {
  false, false, descriptor_table_protodef_osmap_2eproto, "osmap.proto", 1861,
  &descriptor_table_osmap_2eproto_once, descriptor_table_osmap_2eproto_sccs, descriptor_table_osmap_2eproto_deps, 22, 0,
  schemas, file_default_instances, TableStruct_osmap_2eproto::offsets,
  file_level_metadata_osmap_2eproto, 22, file_level_enum_descriptors_osmap_2eproto, file_level_service_descriptors_osmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osmap_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osmap_2eproto)), true);

// ===================================================================

void SerializedDescriptor::InitAsDefaultInstance() {
}
class SerializedDescriptor::_Internal {
 public:
};

SerializedDescriptor::SerializedDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  block_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedDescriptor)
}
SerializedDescriptor::SerializedDescriptor(const SerializedDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_(from.block_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedDescriptor)
}

void SerializedDescriptor::SharedCtor() {
}

SerializedDescriptor::~SerializedDescriptor() {
  // @@protoc_insertion_point(destructor:SerializedDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedDescriptor::ArenaDtor(void* object) {
  SerializedDescriptor* _this = reinterpret_cast< SerializedDescriptor* >(object);
  (void)_this;
}
void SerializedDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedDescriptor& SerializedDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedDescriptor_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed32 block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_block(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_block(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 block = 1;
  if (this->_internal_block_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedDescriptor)
  return target;
}

size_t SerializedDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 block = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_block_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _block_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedDescriptor)
    MergeFrom(*source);
  }
}

void SerializedDescriptor::MergeFrom(const SerializedDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_.MergeFrom(from.block_);
}

void SerializedDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedDescriptor::CopyFrom(const SerializedDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedDescriptor::IsInitialized() const {
  return true;
}

void SerializedDescriptor::InternalSwap(SerializedDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_.InternalSwap(&other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedPose::InitAsDefaultInstance() {
}
class SerializedPose::_Internal {
 public:
};

SerializedPose::SerializedPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedPose)
}
SerializedPose::SerializedPose(const SerializedPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedPose)
}

void SerializedPose::SharedCtor() {
}

SerializedPose::~SerializedPose() {
  // @@protoc_insertion_point(destructor:SerializedPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedPose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedPose::ArenaDtor(void* object) {
  SerializedPose* _this = reinterpret_cast< SerializedPose* >(object);
  (void)_this;
}
void SerializedPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedPose& SerializedPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedPose_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedPose::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_element(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_element(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float element = 1;
  if (this->_internal_element_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_element(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedPose)
  return target;
}

size_t SerializedPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float element = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_element_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _element_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedPose)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedPose)
    MergeFrom(*source);
  }
}

void SerializedPose::MergeFrom(const SerializedPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void SerializedPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedPose::CopyFrom(const SerializedPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedPose::IsInitialized() const {
  return true;
}

void SerializedPose::InternalSwap(SerializedPose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedPosition::InitAsDefaultInstance() {
}
class SerializedPosition::_Internal {
 public:
};

SerializedPosition::SerializedPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedPosition)
}
SerializedPosition::SerializedPosition(const SerializedPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:SerializedPosition)
}

void SerializedPosition::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

SerializedPosition::~SerializedPosition() {
  // @@protoc_insertion_point(destructor:SerializedPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedPosition::ArenaDtor(void* object) {
  SerializedPosition* _this = reinterpret_cast< SerializedPosition* >(object);
  (void)_this;
}
void SerializedPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedPosition& SerializedPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedPosition_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedPosition)
  return target;
}

size_t SerializedPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedPosition)
    MergeFrom(*source);
  }
}

void SerializedPosition::MergeFrom(const SerializedPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void SerializedPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedPosition::CopyFrom(const SerializedPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedPosition::IsInitialized() const {
  return true;
}

void SerializedPosition::InternalSwap(SerializedPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedPosition, z_)
      + sizeof(SerializedPosition::z_)
      - PROTOBUF_FIELD_OFFSET(SerializedPosition, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedKeypoint::InitAsDefaultInstance() {
}
class SerializedKeypoint::_Internal {
 public:
};

SerializedKeypoint::SerializedKeypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedKeypoint)
}
SerializedKeypoint::SerializedKeypoint(const SerializedKeypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ptx_, &from.ptx_,
    static_cast<size_t>(reinterpret_cast<char*>(&octave_) -
    reinterpret_cast<char*>(&ptx_)) + sizeof(octave_));
  // @@protoc_insertion_point(copy_constructor:SerializedKeypoint)
}

void SerializedKeypoint::SharedCtor() {
  ::memset(&ptx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&octave_) -
      reinterpret_cast<char*>(&ptx_)) + sizeof(octave_));
}

SerializedKeypoint::~SerializedKeypoint() {
  // @@protoc_insertion_point(destructor:SerializedKeypoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedKeypoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedKeypoint::ArenaDtor(void* object) {
  SerializedKeypoint* _this = reinterpret_cast< SerializedKeypoint* >(object);
  (void)_this;
}
void SerializedKeypoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedKeypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedKeypoint& SerializedKeypoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedKeypoint_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedKeypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ptx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&octave_) -
      reinterpret_cast<char*>(&ptx_)) + sizeof(octave_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedKeypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float ptx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float octave = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          octave_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedKeypoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ptx = 1;
  if (!(this->ptx() <= 0 && this->ptx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_ptx(), target);
  }

  // float pty = 2;
  if (!(this->pty() <= 0 && this->pty() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pty(), target);
  }

  // float angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  // float octave = 4;
  if (!(this->octave() <= 0 && this->octave() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_octave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeypoint)
  return target;
}

size_t SerializedKeypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeypoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ptx = 1;
  if (!(this->ptx() <= 0 && this->ptx() >= 0)) {
    total_size += 1 + 4;
  }

  // float pty = 2;
  if (!(this->pty() <= 0 && this->pty() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float octave = 4;
  if (!(this->octave() <= 0 && this->octave() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedKeypoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedKeypoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedKeypoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeypoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeypoint)
    MergeFrom(*source);
  }
}

void SerializedKeypoint::MergeFrom(const SerializedKeypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ptx() <= 0 && from.ptx() >= 0)) {
    _internal_set_ptx(from._internal_ptx());
  }
  if (!(from.pty() <= 0 && from.pty() >= 0)) {
    _internal_set_pty(from._internal_pty());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (!(from.octave() <= 0 && from.octave() >= 0)) {
    _internal_set_octave(from._internal_octave());
  }
}

void SerializedKeypoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeypoint::CopyFrom(const SerializedKeypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeypoint::IsInitialized() const {
  return true;
}

void SerializedKeypoint::InternalSwap(SerializedKeypoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedKeypoint, octave_)
      + sizeof(SerializedKeypoint::octave_)
      - PROTOBUF_FIELD_OFFSET(SerializedKeypoint, ptx_)>(
          reinterpret_cast<char*>(&ptx_),
          reinterpret_cast<char*>(&other->ptx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedKeypoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedK::InitAsDefaultInstance() {
}
class SerializedK::_Internal {
 public:
};

SerializedK::SerializedK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedK)
}
SerializedK::SerializedK(const SerializedK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&cy_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(cy_));
  // @@protoc_insertion_point(copy_constructor:SerializedK)
}

void SerializedK::SharedCtor() {
  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cy_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(cy_));
}

SerializedK::~SerializedK() {
  // @@protoc_insertion_point(destructor:SerializedK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedK::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedK::ArenaDtor(void* object) {
  SerializedK* _this = reinterpret_cast< SerializedK* >(object);
  (void)_this;
}
void SerializedK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedK& SerializedK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedK_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedK::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cy_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(cy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          cx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fx(), target);
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fy(), target);
  }

  // float cx = 3;
  if (!(this->cx() <= 0 && this->cx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cx(), target);
  }

  // float cy = 4;
  if (!(this->cy() <= 0 && this->cy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedK)
  return target;
}

size_t SerializedK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    total_size += 1 + 4;
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    total_size += 1 + 4;
  }

  // float cx = 3;
  if (!(this->cx() <= 0 && this->cx() >= 0)) {
    total_size += 1 + 4;
  }

  // float cy = 4;
  if (!(this->cy() <= 0 && this->cy() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedK)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedK)
    MergeFrom(*source);
  }
}

void SerializedK::MergeFrom(const SerializedK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fx() <= 0 && from.fx() >= 0)) {
    _internal_set_fx(from._internal_fx());
  }
  if (!(from.fy() <= 0 && from.fy() >= 0)) {
    _internal_set_fy(from._internal_fy());
  }
  if (!(from.cx() <= 0 && from.cx() >= 0)) {
    _internal_set_cx(from._internal_cx());
  }
  if (!(from.cy() <= 0 && from.cy() >= 0)) {
    _internal_set_cy(from._internal_cy());
  }
}

void SerializedK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedK::CopyFrom(const SerializedK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedK::IsInitialized() const {
  return true;
}

void SerializedK::InternalSwap(SerializedK* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedK, cy_)
      + sizeof(SerializedK::cy_)
      - PROTOBUF_FIELD_OFFSET(SerializedK, fx_)>(
          reinterpret_cast<char*>(&fx_),
          reinterpret_cast<char*>(&other->fx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedKArray::InitAsDefaultInstance() {
}
class SerializedKArray::_Internal {
 public:
};

SerializedKArray::SerializedKArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  k_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedKArray)
}
SerializedKArray::SerializedKArray(const SerializedKArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      k_(from.k_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedKArray)
}

void SerializedKArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedKArray_osmap_2eproto.base);
}

SerializedKArray::~SerializedKArray() {
  // @@protoc_insertion_point(destructor:SerializedKArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedKArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedKArray::ArenaDtor(void* object) {
  SerializedKArray* _this = reinterpret_cast< SerializedKArray* >(object);
  (void)_this;
}
void SerializedKArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedKArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedKArray& SerializedKArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedKArray_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedKArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  k_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedKArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SerializedK k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_k(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedKArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SerializedK k = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_k_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_k(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedKArray)
  return target;
}

size_t SerializedKArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedK k = 1;
  total_size += 1UL * this->_internal_k_size();
  for (const auto& msg : this->k_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedKArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedKArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedKArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKArray)
    MergeFrom(*source);
  }
}

void SerializedKArray::MergeFrom(const SerializedKArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  k_.MergeFrom(from.k_);
}

void SerializedKArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKArray::CopyFrom(const SerializedKArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKArray::IsInitialized() const {
  return true;
}

void SerializedKArray::InternalSwap(SerializedKArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  k_.InternalSwap(&other->k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedKArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedEllipsoid::InitAsDefaultInstance() {
}
class SerializedEllipsoid::_Internal {
 public:
};

SerializedEllipsoid::SerializedEllipsoid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedEllipsoid)
}
SerializedEllipsoid::SerializedEllipsoid(const SerializedEllipsoid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedEllipsoid)
}

void SerializedEllipsoid::SharedCtor() {
}

SerializedEllipsoid::~SerializedEllipsoid() {
  // @@protoc_insertion_point(destructor:SerializedEllipsoid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedEllipsoid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedEllipsoid::ArenaDtor(void* object) {
  SerializedEllipsoid* _this = reinterpret_cast< SerializedEllipsoid* >(object);
  (void)_this;
}
void SerializedEllipsoid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedEllipsoid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedEllipsoid& SerializedEllipsoid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedEllipsoid_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedEllipsoid::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedEllipsoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedEllipsoid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_element(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_element(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedEllipsoid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedEllipsoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float element = 1;
  if (this->_internal_element_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_element(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedEllipsoid)
  return target;
}

size_t SerializedEllipsoid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedEllipsoid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float element = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_element_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _element_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedEllipsoid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedEllipsoid)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedEllipsoid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedEllipsoid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedEllipsoid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedEllipsoid)
    MergeFrom(*source);
  }
}

void SerializedEllipsoid::MergeFrom(const SerializedEllipsoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedEllipsoid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void SerializedEllipsoid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedEllipsoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedEllipsoid::CopyFrom(const SerializedEllipsoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedEllipsoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedEllipsoid::IsInitialized() const {
  return true;
}

void SerializedEllipsoid::InternalSwap(SerializedEllipsoid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedEllipsoid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedMappoint::InitAsDefaultInstance() {
  ::_SerializedMappoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::SerializedPosition*>(
      ::SerializedPosition::internal_default_instance());
  ::_SerializedMappoint_default_instance_._instance.get_mutable()->briefdescriptor_ = const_cast< ::SerializedDescriptor*>(
      ::SerializedDescriptor::internal_default_instance());
}
class SerializedMappoint::_Internal {
 public:
  static const ::SerializedPosition& position(const SerializedMappoint* msg);
  static const ::SerializedDescriptor& briefdescriptor(const SerializedMappoint* msg);
};

const ::SerializedPosition&
SerializedMappoint::_Internal::position(const SerializedMappoint* msg) {
  return *msg->position_;
}
const ::SerializedDescriptor&
SerializedMappoint::_Internal::briefdescriptor(const SerializedMappoint* msg) {
  return *msg->briefdescriptor_;
}
SerializedMappoint::SerializedMappoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedMappoint)
}
SerializedMappoint::SerializedMappoint(const SerializedMappoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::SerializedPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_briefdescriptor()) {
    briefdescriptor_ = new ::SerializedDescriptor(*from.briefdescriptor_);
  } else {
    briefdescriptor_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&found_) -
    reinterpret_cast<char*>(&id_)) + sizeof(found_));
  // @@protoc_insertion_point(copy_constructor:SerializedMappoint)
}

void SerializedMappoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedMappoint_osmap_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&position_)) + sizeof(found_));
}

SerializedMappoint::~SerializedMappoint() {
  // @@protoc_insertion_point(destructor:SerializedMappoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedMappoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete briefdescriptor_;
}

void SerializedMappoint::ArenaDtor(void* object) {
  SerializedMappoint* _this = reinterpret_cast< SerializedMappoint* >(object);
  (void)_this;
}
void SerializedMappoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedMappoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedMappoint& SerializedMappoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedMappoint_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedMappoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedMappoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && briefdescriptor_ != nullptr) {
    delete briefdescriptor_;
  }
  briefdescriptor_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&id_)) + sizeof(found_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedMappoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerializedPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .SerializedDescriptor briefdescriptor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_briefdescriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedMappoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedMappoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .SerializedPosition position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // float visible = 3;
  if (!(this->visible() <= 0 && this->visible() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_visible(), target);
  }

  // float found = 4;
  if (!(this->found() <= 0 && this->found() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_found(), target);
  }

  // .SerializedDescriptor briefdescriptor = 5;
  if (this->has_briefdescriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::briefdescriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedMappoint)
  return target;
}

size_t SerializedMappoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedMappoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SerializedPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .SerializedDescriptor briefdescriptor = 5;
  if (this->has_briefdescriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *briefdescriptor_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // float visible = 3;
  if (!(this->visible() <= 0 && this->visible() >= 0)) {
    total_size += 1 + 4;
  }

  // float found = 4;
  if (!(this->found() <= 0 && this->found() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedMappoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedMappoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedMappoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedMappoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedMappoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedMappoint)
    MergeFrom(*source);
  }
}

void SerializedMappoint::MergeFrom(const SerializedMappoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedMappoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::SerializedPosition::MergeFrom(from._internal_position());
  }
  if (from.has_briefdescriptor()) {
    _internal_mutable_briefdescriptor()->::SerializedDescriptor::MergeFrom(from._internal_briefdescriptor());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.visible() <= 0 && from.visible() >= 0)) {
    _internal_set_visible(from._internal_visible());
  }
  if (!(from.found() <= 0 && from.found() >= 0)) {
    _internal_set_found(from._internal_found());
  }
}

void SerializedMappoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedMappoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedMappoint::CopyFrom(const SerializedMappoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedMappoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedMappoint::IsInitialized() const {
  return true;
}

void SerializedMappoint::InternalSwap(SerializedMappoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedMappoint, found_)
      + sizeof(SerializedMappoint::found_)
      - PROTOBUF_FIELD_OFFSET(SerializedMappoint, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedMappoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedMappointArray::InitAsDefaultInstance() {
}
class SerializedMappointArray::_Internal {
 public:
};

SerializedMappointArray::SerializedMappointArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mappoint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedMappointArray)
}
SerializedMappointArray::SerializedMappointArray(const SerializedMappointArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mappoint_(from.mappoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedMappointArray)
}

void SerializedMappointArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedMappointArray_osmap_2eproto.base);
}

SerializedMappointArray::~SerializedMappointArray() {
  // @@protoc_insertion_point(destructor:SerializedMappointArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedMappointArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedMappointArray::ArenaDtor(void* object) {
  SerializedMappointArray* _this = reinterpret_cast< SerializedMappointArray* >(object);
  (void)_this;
}
void SerializedMappointArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedMappointArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedMappointArray& SerializedMappointArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedMappointArray_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedMappointArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedMappointArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappoint_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedMappointArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SerializedMappoint mappoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedMappointArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedMappointArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SerializedMappoint mappoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mappoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mappoint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedMappointArray)
  return target;
}

size_t SerializedMappointArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedMappointArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedMappoint mappoint = 1;
  total_size += 1UL * this->_internal_mappoint_size();
  for (const auto& msg : this->mappoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedMappointArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedMappointArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedMappointArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedMappointArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedMappointArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedMappointArray)
    MergeFrom(*source);
  }
}

void SerializedMappointArray::MergeFrom(const SerializedMappointArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedMappointArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappoint_.MergeFrom(from.mappoint_);
}

void SerializedMappointArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedMappointArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedMappointArray::CopyFrom(const SerializedMappointArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedMappointArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedMappointArray::IsInitialized() const {
  return true;
}

void SerializedMappointArray::InternalSwap(SerializedMappointArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mappoint_.InternalSwap(&other->mappoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedMappointArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedObject::InitAsDefaultInstance() {
  ::_SerializedObject_default_instance_._instance.get_mutable()->ellipsoid_ = const_cast< ::SerializedEllipsoid*>(
      ::SerializedEllipsoid::internal_default_instance());
}
class SerializedObject::_Internal {
 public:
  static const ::SerializedEllipsoid& ellipsoid(const SerializedObject* msg);
};

const ::SerializedEllipsoid&
SerializedObject::_Internal::ellipsoid(const SerializedObject* msg) {
  return *msg->ellipsoid_;
}
SerializedObject::SerializedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedObject)
}
SerializedObject::SerializedObject(const SerializedObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ellipsoid()) {
    ellipsoid_ = new ::SerializedEllipsoid(*from.ellipsoid_);
  } else {
    ellipsoid_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:SerializedObject)
}

void SerializedObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedObject_osmap_2eproto.base);
  ::memset(&ellipsoid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&ellipsoid_)) + sizeof(object_id_));
}

SerializedObject::~SerializedObject() {
  // @@protoc_insertion_point(destructor:SerializedObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ellipsoid_;
}

void SerializedObject::ArenaDtor(void* object) {
  SerializedObject* _this = reinterpret_cast< SerializedObject* >(object);
  (void)_this;
}
void SerializedObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedObject& SerializedObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedObject_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ellipsoid_ != nullptr) {
    delete ellipsoid_;
  }
  ellipsoid_ = nullptr;
  object_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SerializedEllipsoid ellipsoid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ellipsoid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SerializedEllipsoid ellipsoid = 1;
  if (this->has_ellipsoid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ellipsoid(this), target, stream);
  }

  // uint32 object_id = 2;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedObject)
  return target;
}

size_t SerializedObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SerializedEllipsoid ellipsoid = 1;
  if (this->has_ellipsoid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ellipsoid_);
  }

  // uint32 object_id = 2;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedObject)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedObject)
    MergeFrom(*source);
  }
}

void SerializedObject::MergeFrom(const SerializedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ellipsoid()) {
    _internal_mutable_ellipsoid()->::SerializedEllipsoid::MergeFrom(from._internal_ellipsoid());
  }
  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void SerializedObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedObject::CopyFrom(const SerializedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedObject::IsInitialized() const {
  return true;
}

void SerializedObject::InternalSwap(SerializedObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedObject, object_id_)
      + sizeof(SerializedObject::object_id_)
      - PROTOBUF_FIELD_OFFSET(SerializedObject, ellipsoid_)>(
          reinterpret_cast<char*>(&ellipsoid_),
          reinterpret_cast<char*>(&other->ellipsoid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedObjectArray::InitAsDefaultInstance() {
}
class SerializedObjectArray::_Internal {
 public:
};

SerializedObjectArray::SerializedObjectArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedObjectArray)
}
SerializedObjectArray::SerializedObjectArray(const SerializedObjectArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_(from.object_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedObjectArray)
}

void SerializedObjectArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedObjectArray_osmap_2eproto.base);
}

SerializedObjectArray::~SerializedObjectArray() {
  // @@protoc_insertion_point(destructor:SerializedObjectArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedObjectArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedObjectArray::ArenaDtor(void* object) {
  SerializedObjectArray* _this = reinterpret_cast< SerializedObjectArray* >(object);
  (void)_this;
}
void SerializedObjectArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedObjectArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedObjectArray& SerializedObjectArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedObjectArray_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedObjectArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedObjectArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedObjectArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SerializedObject object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedObjectArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedObjectArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SerializedObject object = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedObjectArray)
  return target;
}

size_t SerializedObjectArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedObjectArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedObject object = 1;
  total_size += 1UL * this->_internal_object_size();
  for (const auto& msg : this->object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedObjectArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedObjectArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedObjectArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedObjectArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedObjectArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedObjectArray)
    MergeFrom(*source);
  }
}

void SerializedObjectArray::MergeFrom(const SerializedObjectArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedObjectArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
}

void SerializedObjectArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedObjectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedObjectArray::CopyFrom(const SerializedObjectArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedObjectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedObjectArray::IsInitialized() const {
  return true;
}

void SerializedObjectArray::InternalSwap(SerializedObjectArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_.InternalSwap(&other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedObjectArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedBBox2::InitAsDefaultInstance() {
}
class SerializedBBox2::_Internal {
 public:
};

SerializedBBox2::SerializedBBox2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedBBox2)
}
SerializedBBox2::SerializedBBox2(const SerializedBBox2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&ymax_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  // @@protoc_insertion_point(copy_constructor:SerializedBBox2)
}

void SerializedBBox2::SharedCtor() {
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ymax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
}

SerializedBBox2::~SerializedBBox2() {
  // @@protoc_insertion_point(destructor:SerializedBBox2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedBBox2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedBBox2::ArenaDtor(void* object) {
  SerializedBBox2* _this = reinterpret_cast< SerializedBBox2* >(object);
  (void)_this;
}
void SerializedBBox2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedBBox2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedBBox2& SerializedBBox2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedBBox2_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedBBox2::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedBBox2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ymax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedBBox2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float xmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ymin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float xmax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ymax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedBBox2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedBBox2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float xmin = 1;
  if (!(this->xmin() <= 0 && this->xmin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_xmin(), target);
  }

  // float ymin = 2;
  if (!(this->ymin() <= 0 && this->ymin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ymin(), target);
  }

  // float xmax = 3;
  if (!(this->xmax() <= 0 && this->xmax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_xmax(), target);
  }

  // float ymax = 4;
  if (!(this->ymax() <= 0 && this->ymax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_ymax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedBBox2)
  return target;
}

size_t SerializedBBox2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedBBox2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float xmin = 1;
  if (!(this->xmin() <= 0 && this->xmin() >= 0)) {
    total_size += 1 + 4;
  }

  // float ymin = 2;
  if (!(this->ymin() <= 0 && this->ymin() >= 0)) {
    total_size += 1 + 4;
  }

  // float xmax = 3;
  if (!(this->xmax() <= 0 && this->xmax() >= 0)) {
    total_size += 1 + 4;
  }

  // float ymax = 4;
  if (!(this->ymax() <= 0 && this->ymax() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedBBox2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedBBox2)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedBBox2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedBBox2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedBBox2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedBBox2)
    MergeFrom(*source);
  }
}

void SerializedBBox2::MergeFrom(const SerializedBBox2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedBBox2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.xmin() <= 0 && from.xmin() >= 0)) {
    _internal_set_xmin(from._internal_xmin());
  }
  if (!(from.ymin() <= 0 && from.ymin() >= 0)) {
    _internal_set_ymin(from._internal_ymin());
  }
  if (!(from.xmax() <= 0 && from.xmax() >= 0)) {
    _internal_set_xmax(from._internal_xmax());
  }
  if (!(from.ymax() <= 0 && from.ymax() >= 0)) {
    _internal_set_ymax(from._internal_ymax());
  }
}

void SerializedBBox2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedBBox2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedBBox2::CopyFrom(const SerializedBBox2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedBBox2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedBBox2::IsInitialized() const {
  return true;
}

void SerializedBBox2::InternalSwap(SerializedBBox2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedBBox2, ymax_)
      + sizeof(SerializedBBox2::ymax_)
      - PROTOBUF_FIELD_OFFSET(SerializedBBox2, xmin_)>(
          reinterpret_cast<char*>(&xmin_),
          reinterpret_cast<char*>(&other->xmin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedBBox2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedNode::InitAsDefaultInstance() {
  ::_SerializedNode_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::SerializedBBox2*>(
      ::SerializedBBox2::internal_default_instance());
}
class SerializedNode::_Internal {
 public:
  static const ::SerializedBBox2& bbox(const SerializedNode* msg);
};

const ::SerializedBBox2&
SerializedNode::_Internal::bbox(const SerializedNode* msg) {
  return *msg->bbox_;
}
SerializedNode::SerializedNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  neighbours_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedNode)
}
SerializedNode::SerializedNode(const SerializedNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      neighbours_ids_(from.neighbours_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bbox()) {
    bbox_ = new ::SerializedBBox2(*from.bbox_);
  } else {
    bbox_ = nullptr;
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(object_id_));
  // @@protoc_insertion_point(copy_constructor:SerializedNode)
}

void SerializedNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedNode_osmap_2eproto.base);
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(object_id_));
}

SerializedNode::~SerializedNode() {
  // @@protoc_insertion_point(destructor:SerializedNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bbox_;
}

void SerializedNode::ArenaDtor(void* object) {
  SerializedNode* _this = reinterpret_cast< SerializedNode* >(object);
  (void)_this;
}
void SerializedNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedNode& SerializedNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedNode_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbours_ids_.Clear();
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 category_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          category_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 neighbours_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_neighbours_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_neighbours_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 object_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerializedBBox2 bbox = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_id(), target);
  }

  // uint32 category_id = 2;
  if (this->category_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_category_id(), target);
  }

  // repeated uint32 neighbours_ids = 3;
  {
    int byte_size = _neighbours_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_neighbours_ids(), byte_size, target);
    }
  }

  // uint32 object_id = 4;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_object_id(), target);
  }

  // .SerializedBBox2 bbox = 5;
  if (this->has_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bbox(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedNode)
  return target;
}

size_t SerializedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 neighbours_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->neighbours_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _neighbours_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .SerializedBBox2 bbox = 5;
  if (this->has_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_node_id());
  }

  // uint32 category_id = 2;
  if (this->category_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_category_id());
  }

  // uint32 object_id = 4;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedNode)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedNode)
    MergeFrom(*source);
  }
}

void SerializedNode::MergeFrom(const SerializedNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbours_ids_.MergeFrom(from.neighbours_ids_);
  if (from.has_bbox()) {
    _internal_mutable_bbox()->::SerializedBBox2::MergeFrom(from._internal_bbox());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.category_id() != 0) {
    _internal_set_category_id(from._internal_category_id());
  }
  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void SerializedNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedNode::CopyFrom(const SerializedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedNode::IsInitialized() const {
  return true;
}

void SerializedNode::InternalSwap(SerializedNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  neighbours_ids_.InternalSwap(&other->neighbours_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedNode, object_id_)
      + sizeof(SerializedNode::object_id_)
      - PROTOBUF_FIELD_OFFSET(SerializedNode, bbox_)>(
          reinterpret_cast<char*>(&bbox_),
          reinterpret_cast<char*>(&other->bbox_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedGraph::InitAsDefaultInstance() {
}
class SerializedGraph::_Internal {
 public:
};

SerializedGraph::SerializedGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedGraph)
}
SerializedGraph::SerializedGraph(const SerializedGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_(from.node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedGraph)
}

void SerializedGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedGraph_osmap_2eproto.base);
}

SerializedGraph::~SerializedGraph() {
  // @@protoc_insertion_point(destructor:SerializedGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedGraph::ArenaDtor(void* object) {
  SerializedGraph* _this = reinterpret_cast< SerializedGraph* >(object);
  (void)_this;
}
void SerializedGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedGraph& SerializedGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedGraph_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SerializedNode node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SerializedNode node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedGraph)
  return target;
}

size_t SerializedGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedNode node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedGraph)
    MergeFrom(*source);
  }
}

void SerializedGraph::MergeFrom(const SerializedGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
}

void SerializedGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedGraph::CopyFrom(const SerializedGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedGraph::IsInitialized() const {
  return true;
}

void SerializedGraph::InternalSwap(SerializedGraph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedGraphArray::InitAsDefaultInstance() {
}
class SerializedGraphArray::_Internal {
 public:
};

SerializedGraphArray::SerializedGraphArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  graph_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedGraphArray)
}
SerializedGraphArray::SerializedGraphArray(const SerializedGraphArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graph_(from.graph_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedGraphArray)
}

void SerializedGraphArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedGraphArray_osmap_2eproto.base);
}

SerializedGraphArray::~SerializedGraphArray() {
  // @@protoc_insertion_point(destructor:SerializedGraphArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedGraphArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedGraphArray::ArenaDtor(void* object) {
  SerializedGraphArray* _this = reinterpret_cast< SerializedGraphArray* >(object);
  (void)_this;
}
void SerializedGraphArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedGraphArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedGraphArray& SerializedGraphArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedGraphArray_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedGraphArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedGraphArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedGraphArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SerializedGraph graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graph(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedGraphArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedGraphArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SerializedGraph graph = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graph_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_graph(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedGraphArray)
  return target;
}

size_t SerializedGraphArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedGraphArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedGraph graph = 1;
  total_size += 1UL * this->_internal_graph_size();
  for (const auto& msg : this->graph_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedGraphArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedGraphArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedGraphArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedGraphArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedGraphArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedGraphArray)
    MergeFrom(*source);
  }
}

void SerializedGraphArray::MergeFrom(const SerializedGraphArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedGraphArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_.MergeFrom(from.graph_);
}

void SerializedGraphArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedGraphArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedGraphArray::CopyFrom(const SerializedGraphArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedGraphArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedGraphArray::IsInitialized() const {
  return true;
}

void SerializedGraphArray::InternalSwap(SerializedGraphArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  graph_.InternalSwap(&other->graph_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedGraphArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedObjectTrack::InitAsDefaultInstance() {
}
class SerializedObjectTrack::_Internal {
 public:
};

SerializedObjectTrack::SerializedObjectTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  kf_bboxes_(arena),
  kf_indices_(arena),
  kf_scores_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedObjectTrack)
}
SerializedObjectTrack::SerializedObjectTrack(const SerializedObjectTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      kf_bboxes_(from.kf_bboxes_),
      kf_indices_(from.kf_indices_),
      kf_scores_(from.kf_scores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:SerializedObjectTrack)
}

void SerializedObjectTrack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedObjectTrack_osmap_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

SerializedObjectTrack::~SerializedObjectTrack() {
  // @@protoc_insertion_point(destructor:SerializedObjectTrack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedObjectTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedObjectTrack::ArenaDtor(void* object) {
  SerializedObjectTrack* _this = reinterpret_cast< SerializedObjectTrack* >(object);
  (void)_this;
}
void SerializedObjectTrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedObjectTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedObjectTrack& SerializedObjectTrack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedObjectTrack_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedObjectTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedObjectTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kf_bboxes_.Clear();
  kf_indices_.Clear();
  kf_scores_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedObjectTrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color_r = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          color_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color_g = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          color_g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color_b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          color_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SerializedBBox2 kf_bboxes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kf_bboxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 kf_indices = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_kf_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_kf_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double kf_scores = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_kf_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81) {
          _internal_add_kf_scores(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedObjectTrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedObjectTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 cat = 2;
  if (this->cat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cat(), target);
  }

  // uint32 last_frame_id = 3;
  if (this->last_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_frame_id(), target);
  }

  // uint32 color_r = 4;
  if (this->color_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_color_r(), target);
  }

  // uint32 color_g = 5;
  if (this->color_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_color_g(), target);
  }

  // uint32 color_b = 6;
  if (this->color_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_color_b(), target);
  }

  // uint32 status = 7;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_status(), target);
  }

  // repeated .SerializedBBox2 kf_bboxes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kf_bboxes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_kf_bboxes(i), target, stream);
  }

  // repeated uint32 kf_indices = 9;
  {
    int byte_size = _kf_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_kf_indices(), byte_size, target);
    }
  }

  // repeated double kf_scores = 10;
  if (this->_internal_kf_scores_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_kf_scores(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedObjectTrack)
  return target;
}

size_t SerializedObjectTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedObjectTrack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedBBox2 kf_bboxes = 8;
  total_size += 1UL * this->_internal_kf_bboxes_size();
  for (const auto& msg : this->kf_bboxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 kf_indices = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->kf_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kf_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double kf_scores = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_kf_scores_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kf_scores_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 cat = 2;
  if (this->cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cat());
  }

  // uint32 last_frame_id = 3;
  if (this->last_frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_frame_id());
  }

  // uint32 color_r = 4;
  if (this->color_r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color_r());
  }

  // uint32 color_g = 5;
  if (this->color_g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color_g());
  }

  // uint32 color_b = 6;
  if (this->color_b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color_b());
  }

  // uint32 status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedObjectTrack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedObjectTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedObjectTrack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedObjectTrack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedObjectTrack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedObjectTrack)
    MergeFrom(*source);
  }
}

void SerializedObjectTrack::MergeFrom(const SerializedObjectTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedObjectTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kf_bboxes_.MergeFrom(from.kf_bboxes_);
  kf_indices_.MergeFrom(from.kf_indices_);
  kf_scores_.MergeFrom(from.kf_scores_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.cat() != 0) {
    _internal_set_cat(from._internal_cat());
  }
  if (from.last_frame_id() != 0) {
    _internal_set_last_frame_id(from._internal_last_frame_id());
  }
  if (from.color_r() != 0) {
    _internal_set_color_r(from._internal_color_r());
  }
  if (from.color_g() != 0) {
    _internal_set_color_g(from._internal_color_g());
  }
  if (from.color_b() != 0) {
    _internal_set_color_b(from._internal_color_b());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SerializedObjectTrack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedObjectTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedObjectTrack::CopyFrom(const SerializedObjectTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedObjectTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedObjectTrack::IsInitialized() const {
  return true;
}

void SerializedObjectTrack::InternalSwap(SerializedObjectTrack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  kf_bboxes_.InternalSwap(&other->kf_bboxes_);
  kf_indices_.InternalSwap(&other->kf_indices_);
  kf_scores_.InternalSwap(&other->kf_scores_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedObjectTrack, status_)
      + sizeof(SerializedObjectTrack::status_)
      - PROTOBUF_FIELD_OFFSET(SerializedObjectTrack, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedObjectTrack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedObjectTrackArray::InitAsDefaultInstance() {
}
class SerializedObjectTrackArray::_Internal {
 public:
};

SerializedObjectTrackArray::SerializedObjectTrackArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objecttrack_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedObjectTrackArray)
}
SerializedObjectTrackArray::SerializedObjectTrackArray(const SerializedObjectTrackArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objecttrack_(from.objecttrack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedObjectTrackArray)
}

void SerializedObjectTrackArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedObjectTrackArray_osmap_2eproto.base);
}

SerializedObjectTrackArray::~SerializedObjectTrackArray() {
  // @@protoc_insertion_point(destructor:SerializedObjectTrackArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedObjectTrackArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedObjectTrackArray::ArenaDtor(void* object) {
  SerializedObjectTrackArray* _this = reinterpret_cast< SerializedObjectTrackArray* >(object);
  (void)_this;
}
void SerializedObjectTrackArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedObjectTrackArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedObjectTrackArray& SerializedObjectTrackArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedObjectTrackArray_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedObjectTrackArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedObjectTrackArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objecttrack_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedObjectTrackArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SerializedObjectTrack objecttrack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objecttrack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedObjectTrackArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedObjectTrackArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SerializedObjectTrack objecttrack = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objecttrack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objecttrack(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedObjectTrackArray)
  return target;
}

size_t SerializedObjectTrackArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedObjectTrackArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedObjectTrack objecttrack = 1;
  total_size += 1UL * this->_internal_objecttrack_size();
  for (const auto& msg : this->objecttrack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedObjectTrackArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedObjectTrackArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedObjectTrackArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedObjectTrackArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedObjectTrackArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedObjectTrackArray)
    MergeFrom(*source);
  }
}

void SerializedObjectTrackArray::MergeFrom(const SerializedObjectTrackArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedObjectTrackArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objecttrack_.MergeFrom(from.objecttrack_);
}

void SerializedObjectTrackArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedObjectTrackArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedObjectTrackArray::CopyFrom(const SerializedObjectTrackArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedObjectTrackArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedObjectTrackArray::IsInitialized() const {
  return true;
}

void SerializedObjectTrackArray::InternalSwap(SerializedObjectTrackArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objecttrack_.InternalSwap(&other->objecttrack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedObjectTrackArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedKeyframe::InitAsDefaultInstance() {
  ::_SerializedKeyframe_default_instance_._instance.get_mutable()->pose_ = const_cast< ::SerializedPose*>(
      ::SerializedPose::internal_default_instance());
  ::_SerializedKeyframe_default_instance_._instance.get_mutable()->kmatrix_ = const_cast< ::SerializedK*>(
      ::SerializedK::internal_default_instance());
}
class SerializedKeyframe::_Internal {
 public:
  static const ::SerializedPose& pose(const SerializedKeyframe* msg);
  static const ::SerializedK& kmatrix(const SerializedKeyframe* msg);
};

const ::SerializedPose&
SerializedKeyframe::_Internal::pose(const SerializedKeyframe* msg) {
  return *msg->pose_;
}
const ::SerializedK&
SerializedKeyframe::_Internal::kmatrix(const SerializedKeyframe* msg) {
  return *msg->kmatrix_;
}
SerializedKeyframe::SerializedKeyframe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  loopedgesids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedKeyframe)
}
SerializedKeyframe::SerializedKeyframe(const SerializedKeyframe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      loopedgesids_(from.loopedgesids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::SerializedPose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_kmatrix()) {
    kmatrix_ = new ::SerializedK(*from.kmatrix_);
  } else {
    kmatrix_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:SerializedKeyframe)
}

void SerializedKeyframe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedKeyframe_osmap_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
}

SerializedKeyframe::~SerializedKeyframe() {
  // @@protoc_insertion_point(destructor:SerializedKeyframe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedKeyframe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete kmatrix_;
}

void SerializedKeyframe::ArenaDtor(void* object) {
  SerializedKeyframe* _this = reinterpret_cast< SerializedKeyframe* >(object);
  (void)_this;
}
void SerializedKeyframe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedKeyframe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedKeyframe& SerializedKeyframe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedKeyframe_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedKeyframe::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeyframe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loopedgesids_.Clear();
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && kmatrix_ != nullptr) {
    delete kmatrix_;
  }
  kmatrix_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedKeyframe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerializedPose pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerializedK kmatrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kmatrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 loopedgesids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_loopedgesids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_loopedgesids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedKeyframe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeyframe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .SerializedPose pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // .SerializedK kmatrix = 3;
  if (this->has_kmatrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kmatrix(this), target, stream);
  }

  // uint32 kindex = 4;
  if (this->kindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kindex(), target);
  }

  // repeated uint32 loopedgesids = 5;
  {
    int byte_size = _loopedgesids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_loopedgesids(), byte_size, target);
    }
  }

  // double timestamp = 6;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeyframe)
  return target;
}

size_t SerializedKeyframe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeyframe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 loopedgesids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->loopedgesids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _loopedgesids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .SerializedPose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .SerializedK kmatrix = 3;
  if (this->has_kmatrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kmatrix_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 kindex = 4;
  if (this->kindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kindex());
  }

  // double timestamp = 6;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedKeyframe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeyframe)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedKeyframe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedKeyframe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeyframe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeyframe)
    MergeFrom(*source);
  }
}

void SerializedKeyframe::MergeFrom(const SerializedKeyframe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeyframe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loopedgesids_.MergeFrom(from.loopedgesids_);
  if (from.has_pose()) {
    _internal_mutable_pose()->::SerializedPose::MergeFrom(from._internal_pose());
  }
  if (from.has_kmatrix()) {
    _internal_mutable_kmatrix()->::SerializedK::MergeFrom(from._internal_kmatrix());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.kindex() != 0) {
    _internal_set_kindex(from._internal_kindex());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void SerializedKeyframe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeyframe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeyframe::CopyFrom(const SerializedKeyframe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeyframe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeyframe::IsInitialized() const {
  return true;
}

void SerializedKeyframe::InternalSwap(SerializedKeyframe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loopedgesids_.InternalSwap(&other->loopedgesids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedKeyframe, timestamp_)
      + sizeof(SerializedKeyframe::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SerializedKeyframe, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedKeyframe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedKeyframeArray::InitAsDefaultInstance() {
}
class SerializedKeyframeArray::_Internal {
 public:
};

SerializedKeyframeArray::SerializedKeyframeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keyframe_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedKeyframeArray)
}
SerializedKeyframeArray::SerializedKeyframeArray(const SerializedKeyframeArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keyframe_(from.keyframe_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedKeyframeArray)
}

void SerializedKeyframeArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedKeyframeArray_osmap_2eproto.base);
}

SerializedKeyframeArray::~SerializedKeyframeArray() {
  // @@protoc_insertion_point(destructor:SerializedKeyframeArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedKeyframeArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedKeyframeArray::ArenaDtor(void* object) {
  SerializedKeyframeArray* _this = reinterpret_cast< SerializedKeyframeArray* >(object);
  (void)_this;
}
void SerializedKeyframeArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedKeyframeArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedKeyframeArray& SerializedKeyframeArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedKeyframeArray_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedKeyframeArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeyframeArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyframe_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedKeyframeArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SerializedKeyframe keyframe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keyframe(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedKeyframeArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeyframeArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SerializedKeyframe keyframe = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keyframe_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_keyframe(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeyframeArray)
  return target;
}

size_t SerializedKeyframeArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeyframeArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedKeyframe keyframe = 1;
  total_size += 1UL * this->_internal_keyframe_size();
  for (const auto& msg : this->keyframe_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedKeyframeArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeyframeArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedKeyframeArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedKeyframeArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeyframeArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeyframeArray)
    MergeFrom(*source);
  }
}

void SerializedKeyframeArray::MergeFrom(const SerializedKeyframeArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeyframeArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyframe_.MergeFrom(from.keyframe_);
}

void SerializedKeyframeArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeyframeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeyframeArray::CopyFrom(const SerializedKeyframeArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeyframeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeyframeArray::IsInitialized() const {
  return true;
}

void SerializedKeyframeArray::InternalSwap(SerializedKeyframeArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keyframe_.InternalSwap(&other->keyframe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedKeyframeArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedFeature::InitAsDefaultInstance() {
  ::_SerializedFeature_default_instance_._instance.get_mutable()->keypoint_ = const_cast< ::SerializedKeypoint*>(
      ::SerializedKeypoint::internal_default_instance());
  ::_SerializedFeature_default_instance_._instance.get_mutable()->briefdescriptor_ = const_cast< ::SerializedDescriptor*>(
      ::SerializedDescriptor::internal_default_instance());
}
class SerializedFeature::_Internal {
 public:
  static const ::SerializedKeypoint& keypoint(const SerializedFeature* msg);
  static const ::SerializedDescriptor& briefdescriptor(const SerializedFeature* msg);
};

const ::SerializedKeypoint&
SerializedFeature::_Internal::keypoint(const SerializedFeature* msg) {
  return *msg->keypoint_;
}
const ::SerializedDescriptor&
SerializedFeature::_Internal::briefdescriptor(const SerializedFeature* msg) {
  return *msg->briefdescriptor_;
}
SerializedFeature::SerializedFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedFeature)
}
SerializedFeature::SerializedFeature(const SerializedFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_keypoint()) {
    keypoint_ = new ::SerializedKeypoint(*from.keypoint_);
  } else {
    keypoint_ = nullptr;
  }
  if (from._internal_has_briefdescriptor()) {
    briefdescriptor_ = new ::SerializedDescriptor(*from.briefdescriptor_);
  } else {
    briefdescriptor_ = nullptr;
  }
  mappoint_id_ = from.mappoint_id_;
  // @@protoc_insertion_point(copy_constructor:SerializedFeature)
}

void SerializedFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedFeature_osmap_2eproto.base);
  ::memset(&keypoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mappoint_id_) -
      reinterpret_cast<char*>(&keypoint_)) + sizeof(mappoint_id_));
}

SerializedFeature::~SerializedFeature() {
  // @@protoc_insertion_point(destructor:SerializedFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete keypoint_;
  if (this != internal_default_instance()) delete briefdescriptor_;
}

void SerializedFeature::ArenaDtor(void* object) {
  SerializedFeature* _this = reinterpret_cast< SerializedFeature* >(object);
  (void)_this;
}
void SerializedFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedFeature& SerializedFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedFeature_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && keypoint_ != nullptr) {
    delete keypoint_;
  }
  keypoint_ = nullptr;
  if (GetArena() == nullptr && briefdescriptor_ != nullptr) {
    delete briefdescriptor_;
  }
  briefdescriptor_ = nullptr;
  mappoint_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mappoint_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mappoint_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerializedKeypoint keypoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_keypoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerializedDescriptor briefdescriptor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_briefdescriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mappoint_id = 2;
  if (this->mappoint_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mappoint_id(), target);
  }

  // .SerializedKeypoint keypoint = 3;
  if (this->has_keypoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::keypoint(this), target, stream);
  }

  // .SerializedDescriptor briefdescriptor = 4;
  if (this->has_briefdescriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::briefdescriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedFeature)
  return target;
}

size_t SerializedFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SerializedKeypoint keypoint = 3;
  if (this->has_keypoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *keypoint_);
  }

  // .SerializedDescriptor briefdescriptor = 4;
  if (this->has_briefdescriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *briefdescriptor_);
  }

  // uint32 mappoint_id = 2;
  if (this->mappoint_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mappoint_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedFeature)
    MergeFrom(*source);
  }
}

void SerializedFeature::MergeFrom(const SerializedFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_keypoint()) {
    _internal_mutable_keypoint()->::SerializedKeypoint::MergeFrom(from._internal_keypoint());
  }
  if (from.has_briefdescriptor()) {
    _internal_mutable_briefdescriptor()->::SerializedDescriptor::MergeFrom(from._internal_briefdescriptor());
  }
  if (from.mappoint_id() != 0) {
    _internal_set_mappoint_id(from._internal_mappoint_id());
  }
}

void SerializedFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedFeature::CopyFrom(const SerializedFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedFeature::IsInitialized() const {
  return true;
}

void SerializedFeature::InternalSwap(SerializedFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedFeature, mappoint_id_)
      + sizeof(SerializedFeature::mappoint_id_)
      - PROTOBUF_FIELD_OFFSET(SerializedFeature, keypoint_)>(
          reinterpret_cast<char*>(&keypoint_),
          reinterpret_cast<char*>(&other->keypoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedKeyframeFeatures::InitAsDefaultInstance() {
}
class SerializedKeyframeFeatures::_Internal {
 public:
};

SerializedKeyframeFeatures::SerializedKeyframeFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feature_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedKeyframeFeatures)
}
SerializedKeyframeFeatures::SerializedKeyframeFeatures(const SerializedKeyframeFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keyframe_id_ = from.keyframe_id_;
  // @@protoc_insertion_point(copy_constructor:SerializedKeyframeFeatures)
}

void SerializedKeyframeFeatures::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedKeyframeFeatures_osmap_2eproto.base);
  keyframe_id_ = 0u;
}

SerializedKeyframeFeatures::~SerializedKeyframeFeatures() {
  // @@protoc_insertion_point(destructor:SerializedKeyframeFeatures)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedKeyframeFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedKeyframeFeatures::ArenaDtor(void* object) {
  SerializedKeyframeFeatures* _this = reinterpret_cast< SerializedKeyframeFeatures* >(object);
  (void)_this;
}
void SerializedKeyframeFeatures::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedKeyframeFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedKeyframeFeatures& SerializedKeyframeFeatures::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedKeyframeFeatures_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedKeyframeFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeyframeFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  keyframe_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedKeyframeFeatures::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 keyframe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keyframe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SerializedFeature feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedKeyframeFeatures::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeyframeFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keyframe_id = 1;
  if (this->keyframe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keyframe_id(), target);
  }

  // repeated .SerializedFeature feature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_feature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeyframeFeatures)
  return target;
}

size_t SerializedKeyframeFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeyframeFeatures)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedFeature feature = 2;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 keyframe_id = 1;
  if (this->keyframe_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyframe_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedKeyframeFeatures::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeyframeFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedKeyframeFeatures* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedKeyframeFeatures>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeyframeFeatures)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeyframeFeatures)
    MergeFrom(*source);
  }
}

void SerializedKeyframeFeatures::MergeFrom(const SerializedKeyframeFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeyframeFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.keyframe_id() != 0) {
    _internal_set_keyframe_id(from._internal_keyframe_id());
  }
}

void SerializedKeyframeFeatures::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeyframeFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeyframeFeatures::CopyFrom(const SerializedKeyframeFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeyframeFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeyframeFeatures::IsInitialized() const {
  return true;
}

void SerializedKeyframeFeatures::InternalSwap(SerializedKeyframeFeatures* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
  swap(keyframe_id_, other->keyframe_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedKeyframeFeatures::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedKeyframeFeaturesArray::InitAsDefaultInstance() {
}
class SerializedKeyframeFeaturesArray::_Internal {
 public:
};

SerializedKeyframeFeaturesArray::SerializedKeyframeFeaturesArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feature_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SerializedKeyframeFeaturesArray)
}
SerializedKeyframeFeaturesArray::SerializedKeyframeFeaturesArray(const SerializedKeyframeFeaturesArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SerializedKeyframeFeaturesArray)
}

void SerializedKeyframeFeaturesArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedKeyframeFeaturesArray_osmap_2eproto.base);
}

SerializedKeyframeFeaturesArray::~SerializedKeyframeFeaturesArray() {
  // @@protoc_insertion_point(destructor:SerializedKeyframeFeaturesArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedKeyframeFeaturesArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializedKeyframeFeaturesArray::ArenaDtor(void* object) {
  SerializedKeyframeFeaturesArray* _this = reinterpret_cast< SerializedKeyframeFeaturesArray* >(object);
  (void)_this;
}
void SerializedKeyframeFeaturesArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedKeyframeFeaturesArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedKeyframeFeaturesArray& SerializedKeyframeFeaturesArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedKeyframeFeaturesArray_osmap_2eproto.base);
  return *internal_default_instance();
}


void SerializedKeyframeFeaturesArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeyframeFeaturesArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedKeyframeFeaturesArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SerializedKeyframeFeatures feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedKeyframeFeaturesArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeyframeFeaturesArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SerializedKeyframeFeatures feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_feature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeyframeFeaturesArray)
  return target;
}

size_t SerializedKeyframeFeaturesArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeyframeFeaturesArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SerializedKeyframeFeatures feature = 1;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedKeyframeFeaturesArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeyframeFeaturesArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedKeyframeFeaturesArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedKeyframeFeaturesArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeyframeFeaturesArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeyframeFeaturesArray)
    MergeFrom(*source);
  }
}

void SerializedKeyframeFeaturesArray::MergeFrom(const SerializedKeyframeFeaturesArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeyframeFeaturesArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
}

void SerializedKeyframeFeaturesArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeyframeFeaturesArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeyframeFeaturesArray::CopyFrom(const SerializedKeyframeFeaturesArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeyframeFeaturesArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeyframeFeaturesArray::IsInitialized() const {
  return true;
}

void SerializedKeyframeFeaturesArray::InternalSwap(SerializedKeyframeFeaturesArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedKeyframeFeaturesArray::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SerializedDescriptor* Arena::CreateMaybeMessage< ::SerializedDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedPose* Arena::CreateMaybeMessage< ::SerializedPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedPose >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedPosition* Arena::CreateMaybeMessage< ::SerializedPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedKeypoint* Arena::CreateMaybeMessage< ::SerializedKeypoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedKeypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedK* Arena::CreateMaybeMessage< ::SerializedK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedK >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedKArray* Arena::CreateMaybeMessage< ::SerializedKArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedKArray >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedEllipsoid* Arena::CreateMaybeMessage< ::SerializedEllipsoid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedEllipsoid >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedMappoint* Arena::CreateMaybeMessage< ::SerializedMappoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedMappoint >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedMappointArray* Arena::CreateMaybeMessage< ::SerializedMappointArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedMappointArray >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedObject* Arena::CreateMaybeMessage< ::SerializedObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedObject >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedObjectArray* Arena::CreateMaybeMessage< ::SerializedObjectArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedObjectArray >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedBBox2* Arena::CreateMaybeMessage< ::SerializedBBox2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedBBox2 >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedNode* Arena::CreateMaybeMessage< ::SerializedNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedNode >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedGraph* Arena::CreateMaybeMessage< ::SerializedGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedGraphArray* Arena::CreateMaybeMessage< ::SerializedGraphArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedGraphArray >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedObjectTrack* Arena::CreateMaybeMessage< ::SerializedObjectTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedObjectTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedObjectTrackArray* Arena::CreateMaybeMessage< ::SerializedObjectTrackArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedObjectTrackArray >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedKeyframe* Arena::CreateMaybeMessage< ::SerializedKeyframe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedKeyframe >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedKeyframeArray* Arena::CreateMaybeMessage< ::SerializedKeyframeArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedKeyframeArray >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedFeature* Arena::CreateMaybeMessage< ::SerializedFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedKeyframeFeatures* Arena::CreateMaybeMessage< ::SerializedKeyframeFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedKeyframeFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::SerializedKeyframeFeaturesArray* Arena::CreateMaybeMessage< ::SerializedKeyframeFeaturesArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SerializedKeyframeFeaturesArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
